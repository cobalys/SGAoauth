from sga_oauth.shared.helpers.signature import sign_request
import time


def check_timestamp(timestamp):
    timestamp_threshold = 300
    timestamp = int(timestamp)
    now = int(time.time())
    lapsed = now - timestamp
    if lapsed > timestamp_threshold:
        return False
    else:
        return True


def check_signature(signature, method, request, parameters, oauth_consumer_secret, oauth_token_secret=''):
    signature_confirmation = sign_request(method, parameters, oauth_consumer_secret, oauth_token_secret)
    if signature == signature_confirmation:
        return True
    else:
        return False



def verify_request():
    '''
    3.2. Verifying Requests

    Servers receiving an authenticated request MUST validate it by:

        o  Recalculating the request signature independently as described in
          Section 3.4 and comparing it to the value received from the client
          via the "oauth_signature" parameter.

        o  If using the "HMAC-SHA1" or "RSA-SHA1" signature methods, ensuring
          that the combination of nonce/timestamp/token (if present)
          received from the client has not been used before in a previous
          request (the server MAY reject requests with stale timestamps as
          described in Section 3.3).

        o  If a token is present, verifying the scope and status of the
          client authorization as represented by the token (the server MAY
          choose to restrict token usage to the client to which it was
          issued).

        o  If the "oauth_version" parameter is present, ensuring its value is
          "1.0".

    If the request fails verification, the server SHOULD respond with the
    appropriate HTTP response status code.  The server MAY include
    further details about why the request was rejected in the response
    body.

    The server SHOULD return a 400 (Bad Request) status code when
    receiving a request with unsupported parameters, an unsupported
    signature method, missing parameters, or duplicated protocol
    parameters.  The server SHOULD return a 401 (Unauthorized) status
    code when receiving a request with invalid client credentials, an
    invalid or expired token, an invalid signature, or an invalid or used
    nonce.
    '''
    #Verify Signature
    

    #Verify nonce/timestamp/token
    verify_nonce_timestamp(nonce, timestamp)

    #Verify Token


    return True


def verify_nonce_timestamp(nonce, timestamp):
    '''
    3.3. Nonce and Timestamp

    The timestamp value MUST be a positive integer.  Unless otherwise
    specified by the server's documentation, the timestamp is expressed
    in the number of seconds since January 1, 1970 00:00:00 GMT.

    A nonce is a random string, uniquely generated by the client to allow
    the server to verify that a request has never been made before and
    helps prevent replay attacks when requests are made over a non-secure
    channel.  The nonce value MUST be unique across all requests with the
    same timestamp, client credentials, and token combinations.

    To avoid the need to retain an infinite number of nonce values for
    future checks, servers MAY choose to restrict the time period after
    which a request with an old timestamp is rejected.  Note that this
    restriction implies a level of synchronization between the client's
    and server's clocks.  Servers applying such a restriction MAY provide
    a way for the client to sync with the server's clock; alternatively,
    both systems could synchronize with a trusted time service.  Details
    of clock synchronization strategies are beyond the scope of this
    specification.
    '''
    int (timestamp)
    
    The nonce value MUST be unique across all requests with the
    same timestamp, client credentials, and token combinations.
    
    if timerestriction
        timestamp > timerestriction



